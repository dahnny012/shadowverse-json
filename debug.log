[INFO] [base] - Warden of the Adamant Claw
[INFO] [base] - Follower
[INFO] [base.subeffect] - Parsing subeffects with Tokens [':', '[b]', 'Enhance', '[/b]', '[b]', '(', '5', ')', '[/b]', '-', 'Gain', '+', '3', '/', '+', '3', 'and', '[b]', 'Ward', '[/b]', '.', 'Draw', '3', 'cards', '.']
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.alternativeCosts] - Found alternativeCost Enhance for with ['Enhance', '[/b]', '[b]', '(', '5', ')', '[/b]', '-', 'Gain', '+', '3', '/', '+', '3', 'and', '[b]', 'Ward', '[/b]', '.', 'Draw', '3', 'cards', '.']
[INFO] [base.subeffect.alternativeCosts] - Entering subeffect for Enhance
[INFO] [base.subeffect.alternativeCosts.subeffect] - Parsing subeffects with Tokens ['[/b]', '-', 'Gain', '+', '3', '/', '+', '3', 'and', '[b]', 'Ward', '[/b]', '.', 'Draw', '3', 'cards', '.']
[INFO] [base.subeffect.alternativeCosts.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.alternativeCosts.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.alternativeCosts.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.alternativeCosts.subeffect.Gain] - Entered gain ['Gain', '+', '3', '/', '+', '3', 'and', '[b]', 'Ward', '[/b]', '.', 'Draw', '3', 'cards', '.']
[INFO] [base.subeffect.alternativeCosts.subeffect.Gain.parseGain] - Starting with Token +
[INFO] [base.subeffect.alternativeCosts.subeffect.Gain.parseGain.statChange] - Entering stat change ['+', '3', '/', '+', '3', 'and', '[b]', 'Ward', '[/b]', '.', 'Draw', '3', 'cards', '.']
[INFO] [base.subeffect.alternativeCosts.subeffect] - Found {'type': 'Gain', 'effects': [{'type': 'StatChange', 'operation': '+', 'amount': '3'}, {'type': 'StatChange', 'operation': '+', 'amount': '3'}]}
[INFO] [base.subeffect.alternativeCosts.subeffect] - Exiting with tokens: []
[INFO] [base.subeffect] - Found {'type': 'Enhance', 'cost': '5', 'effects': [{'type': 'Gain', 'effects': [{'type': 'StatChange', 'operation': '+', 'amount': '3'}, {'type': 'StatChange', 'operation': '+', 'amount': '3'}]}]}
[INFO] [base.subeffect] - Exiting with tokens: []
[INFO] [base] - Finished iteration ['Fanfare', '[/b]', ':', '[b]', 'Enhance', '[/b]', '[b]', '(', '5', ')', '[/b]', '-', 'Gain', '+', '3', '/', '+', '3', 'and', '[b]', 'Ward', '[/b]', '.', 'Draw', '3', 'cards', '.']
[INFO] [base.evolveEffect] - Finished iteration ['Evolve', '[/b]', ':', 'Deal', 'X', 'damage', 'to', 'an', 'enemy', 'follower', '.', 'X', 'equals', 'this', "follower's", 'attack', '.']
[INFO] [base.evolveEffect] - [
    {
        "type": "Fanfare",
        "effects": [
            {
                "type": "Enhance",
                "cost": "5",
                "effects": [
                    {
                        "type": "Gain",
                        "effects": [
                            {
                                "type": "StatChange",
                                "operation": "+",
                                "amount": "3"
                            },
                            {
                                "type": "StatChange",
                                "operation": "+",
                                "amount": "3"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]
[INFO] [base.evolveEffect] - []
[INFO] [base] - Masamune, One-Eyed Dragon
[INFO] [base] - Follower
[INFO] [base] - Finished iteration ['Bane', '[/b]', '.', '\n']
[INFO] [base.subeffect] - Parsing subeffects with Tokens [':', 'If', '[b]', 'Overflow', '[/b]', 'is', 'active', 'for', 'you', ',', 'gain', 'the', 'following', 'effect', 'and', 'evolve', 'this', 'follower', '-', 'The', 'next', 'time', 'this', 'follower', 'takes', 'damage', ',', 'reduce', 'that', 'damage', 'to', '0', '.', 'If', 'you', 'have', '10', 'play', 'point', 'orbs', ',', 'give', 'your', 'leader', 'the', 'following', 'effect', ':', 'During', 'your', 'turn', ',', 'whenever', 'an', 'allied', 'follower', 'attacks', 'an', 'enemy', 'follower', ',', 'deal', '2', 'damage', 'to', 'the', 'enemy', 'leader', '.', '(', 'This', 'effect', 'is', 'not', 'stackable', 'and', 'lasts', 'for', 'the', 'rest', 'of', 'the', 'match', '.', ')']
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.If] - Starting if with ['If', '[b]', 'Overflow', '[/b]', 'is', 'active', 'for', 'you', ',', 'gain', 'the', 'following', 'effect', 'and', 'evolve', 'this', 'follower', '-', 'The', 'next', 'time', 'this', 'follower', 'takes', 'damage', ',', 'reduce', 'that', 'damage', 'to', '0', '.', 'If', 'you', 'have', '10', 'play', 'point', 'orbs', ',', 'give', 'your', 'leader', 'the', 'following', 'effect', ':', 'During', 'your', 'turn', ',', 'whenever', 'an', 'allied', 'follower', 'attacks', 'an', 'enemy', 'follower', ',', 'deal', '2', 'damage', 'to', 'the', 'enemy', 'leader', '.', '(', 'This', 'effect', 'is', 'not', 'stackable', 'and', 'lasts', 'for', 'the', 'rest', 'of', 'the', 'match', '.', ')']
[INFO] [base.subeffect.If.condition] - Entered conditions with tokens ['[b]', 'Overflow', '[/b]', 'is', 'active', 'for', 'you', ',', 'gain', 'the', 'following', 'effect', 'and', 'evolve', 'this', 'follower', '-', 'The', 'next', 'time', 'this', 'follower', 'takes', 'damage', ',', 'reduce', 'that', 'damage', 'to', '0', '.', 'If', 'you', 'have', '10', 'play', 'point', 'orbs', ',', 'give', 'your', 'leader', 'the', 'following', 'effect', ':', 'During', 'your', 'turn', ',', 'whenever', 'an', 'allied', 'follower', 'attacks', 'an', 'enemy', 'follower', ',', 'deal', '2', 'damage', 'to', 'the', 'enemy', 'leader', '.', '(', 'This', 'effect', 'is', 'not', 'stackable', 'and', 'lasts', 'for', 'the', 'rest', 'of', 'the', 'match', '.', ')']
[INFO] [base.subeffect.If.condition] - Condition Tokens ['[b]', 'Overflow', '[/b]', 'is', 'active', 'for', 'you', ',']
[INFO] [base.subeffect.If.condition] - Tokens after Popping ['gain', 'the', 'following', 'effect', 'and', 'evolve', 'this', 'follower', '-', 'The', 'next', 'time', 'this', 'follower', 'takes', 'damage', ',', 'reduce', 'that', 'damage', 'to', '0', '.', 'If', 'you', 'have', '10', 'play', 'point', 'orbs', ',', 'give', 'your', 'leader', 'the', 'following', 'effect', ':', 'During', 'your', 'turn', ',', 'whenever', 'an', 'allied', 'follower', 'attacks', 'an', 'enemy', 'follower', ',', 'deal', '2', 'damage', 'to', 'the', 'enemy', 'leader', '.', '(', 'This', 'effect', 'is', 'not', 'stackable', 'and', 'lasts', 'for', 'the', 'rest', 'of', 'the', 'match', '.', ')']
[INFO] [base.subeffect.If] - Parsing if subeffect ['gain', 'the', 'following', 'effect', 'and', 'evolve', 'this', 'follower', '-', 'The', 'next', 'time', 'this', 'follower', 'takes', 'damage', ',', 'reduce', 'that', 'damage', 'to', '0']
[INFO] [base.subeffect.If.subeffect] - Parsing subeffects with Tokens ['gain', 'the', 'following', 'effect', 'and', 'evolve', 'this', 'follower', '-', 'The', 'next', 'time', 'this', 'follower', 'takes', 'damage', ',', 'reduce', 'that', 'damage', 'to', '0']
[INFO] [base.subeffect.If.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.If.subeffect.Gain] - Entered gain ['gain', 'the', 'following', 'effect', 'and', 'evolve', 'this', 'follower', '-', 'The', 'next', 'time', 'this', 'follower', 'takes', 'damage', ',', 'reduce', 'that', 'damage', 'to', '0']
[INFO] [base.subeffect.If.subeffect.Gain.parseGain] - Starting with Token the
[WARNING] [base.subeffect.If.subeffect.Gain.parseGain] - Found Unknown ['the', 'following', 'effect', 'and', 'evolve', 'this', 'follower', '-', 'The', 'next', 'time', 'this', 'follower', 'takes', 'damage', ',', 'reduce', 'that', 'damage', 'to', '0']
[INFO] [base.subeffect.If.subeffect] - Found {'type': 'Gain', 'effects': []}
[INFO] [base.subeffect.If.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.If.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.If.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.If.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.If.subeffect.Evolve] - Entering evolve with ['evolve', 'this', 'follower', '-', 'The', 'next', 'time', 'this', 'follower', 'takes', 'damage', ',', 'reduce', 'that', 'damage', 'to', '0']
[INFO] [base.subeffect.If.subeffect] - Found {'type': 'Evolve', 'effects': ['this', 'follower']}
[INFO] [base.subeffect.If.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.If.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.If.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.If.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.If.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.If.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.If.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.If.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.If.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.If.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.If.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.If.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.If.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.If.subeffect] - Exiting with tokens: []
[INFO] [base.subeffect] - Found {'type': 'If', 'effects': {'conditions': [{'type': 'CheckActiveState', 'state': 'Overflow', 'stateEqualTo': True}], 'then': [{'type': 'Gain', 'effects': []}, {'type': 'Evolve', 'effects': ['this', 'follower']}]}}
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.If] - Starting if with ['If', 'you', 'have', '10', 'play', 'point', 'orbs', ',', 'give', 'your', 'leader', 'the', 'following', 'effect', ':', 'During', 'your', 'turn', ',', 'whenever', 'an', 'allied', 'follower', 'attacks', 'an', 'enemy', 'follower', ',', 'deal', '2', 'damage', 'to', 'the', 'enemy', 'leader', '.', '(', 'This', 'effect', 'is', 'not', 'stackable', 'and', 'lasts', 'for', 'the', 'rest', 'of', 'the', 'match', '.', ')']
[INFO] [base.subeffect.If.condition] - Entered conditions with tokens ['you', 'have', '10', 'play', 'point', 'orbs', ',', 'give', 'your', 'leader', 'the', 'following', 'effect', ':', 'During', 'your', 'turn', ',', 'whenever', 'an', 'allied', 'follower', 'attacks', 'an', 'enemy', 'follower', ',', 'deal', '2', 'damage', 'to', 'the', 'enemy', 'leader', '.', '(', 'This', 'effect', 'is', 'not', 'stackable', 'and', 'lasts', 'for', 'the', 'rest', 'of', 'the', 'match', '.', ')']
[INFO] [base.subeffect.If.condition] - Condition Tokens ['you', 'have', '10', 'play', 'point', 'orbs', ',']
[INFO] [base.subeffect.If.condition] - Tokens after Popping ['give', 'your', 'leader', 'the', 'following', 'effect', ':', 'During', 'your', 'turn', ',', 'whenever', 'an', 'allied', 'follower', 'attacks', 'an', 'enemy', 'follower', ',', 'deal', '2', 'damage', 'to', 'the', 'enemy', 'leader', '.', '(', 'This', 'effect', 'is', 'not', 'stackable', 'and', 'lasts', 'for', 'the', 'rest', 'of', 'the', 'match', '.', ')']
[INFO] [base.subeffect.If] - Parsing if subeffect ['give', 'your', 'leader', 'the', 'following', 'effect', ':', 'During', 'your', 'turn', ',', 'whenever', 'an', 'allied', 'follower', 'attacks', 'an', 'enemy', 'follower', ',', 'deal', '2', 'damage', 'to', 'the', 'enemy', 'leader']
[INFO] [base.subeffect.If.subeffect] - Parsing subeffects with Tokens ['give', 'your', 'leader', 'the', 'following', 'effect', ':', 'During', 'your', 'turn', ',', 'whenever', 'an', 'allied', 'follower', 'attacks', 'an', 'enemy', 'follower', ',', 'deal', '2', 'damage', 'to', 'the', 'enemy', 'leader']
[INFO] [base.subeffect.If.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.If.subeffect.Give] - Entered give ['give', 'your', 'leader', 'the', 'following', 'effect', ':', 'During', 'your', 'turn', ',', 'whenever', 'an', 'allied', 'follower', 'attacks', 'an', 'enemy', 'follower', ',', 'deal', '2', 'damage', 'to', 'the', 'enemy', 'leader']
[INFO] [base.subeffect.If.subeffect.Give.parseGain] - Starting with Token your
[WARNING] [base.subeffect.If.subeffect.Give.parseGain] - Found Unknown ['your', 'leader', 'the', 'following', 'effect', ':', 'During', 'your', 'turn', ',', 'whenever', 'an', 'allied', 'follower', 'attacks', 'an', 'enemy', 'follower', ',', 'deal', '2', 'damage', 'to']
[INFO] [base.subeffect.If.subeffect] - Found {'type': 'Give', 'effects': [[]]}
[INFO] [base.subeffect.If.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.If.subeffect] - Exiting with tokens: []
[INFO] [base.subeffect] - Found {'type': 'If', 'effects': {'conditions': [], 'then': [{'type': 'Give', 'effects': [[]]}]}}
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Found {'type': 'Parens', 'condition': None}
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Exiting with tokens: []
[INFO] [base] - Finished iteration ['Fanfare', '[/b]', ':', 'If', '[b]', 'Overflow', '[/b]', 'is', 'active', 'for', 'you', ',', 'gain', 'the', 'following', 'effect', 'and', 'evolve', 'this', 'follower', '-', 'The', 'next', 'time', 'this', 'follower', 'takes', 'damage', ',', 'reduce', 'that', 'damage', 'to', '0', '.', 'If', 'you', 'have', '10', 'play', 'point', 'orbs', ',', 'give', 'your', 'leader', 'the', 'following', 'effect', ':', 'During', 'your', 'turn', ',', 'whenever', 'an', 'allied', 'follower', 'attacks', 'an', 'enemy', 'follower', ',', 'deal', '2', 'damage', 'to', 'the', 'enemy', 'leader', '.', '(', 'This', 'effect', 'is', 'not', 'stackable', 'and', 'lasts', 'for', 'the', 'rest', 'of', 'the', 'match', '.', ')']
[INFO] [base.evolveEffect] - Finished iteration ['(', 'Same', 'as', 'the', 'unevolved', 'form', ',', 'excluding', '[b]', 'Fanfare', '[/b]', '.', ')']
[INFO] [base.evolveEffect] - [
    {
        "type": "Bane"
    },
    {
        "type": "Fanfare",
        "effects": [
            {
                "type": "If",
                "effects": {
                    "conditions": [
                        {
                            "type": "CheckActiveState",
                            "state": "Overflow",
                            "stateEqualTo": true
                        }
                    ],
                    "then": [
                        {
                            "type": "Gain",
                            "effects": []
                        },
                        {
                            "type": "Evolve",
                            "effects": [
                                "this",
                                "follower"
                            ]
                        }
                    ]
                }
            },
            {
                "type": "If",
                "effects": {
                    "conditions": [],
                    "then": [
                        {
                            "type": "Give",
                            "effects": [
                                []
                            ]
                        }
                    ]
                },
                "limit": {
                    "type": "Parens",
                    "condition": null
                }
            }
        ]
    }
]
[INFO] [base.evolveEffect] - []
[INFO] [base] - Lilium, the Wyrmwitch
[INFO] [base] - Follower
[INFO] [base.subeffect] - Parsing subeffects with Tokens [':', 'Discard', 'a', 'card', 'from', 'your', 'hand', '.', 'Put', 'a', '[b]', 'Draconic', 'Creation', '[/b]', 'into', 'your', 'hand', '.']
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Entered discard tokens ['Discard', 'a', 'card', 'from', 'your', 'hand', '.', 'Put', 'a', '[b]', 'Draconic', 'Creation', '[/b]', 'into', 'your', 'hand', '.']
[INFO] [base.subeffect.subeffect] - Parsing subeffects with Tokens ['Put', 'a', '[b]', 'Draconic', 'Creation', '[/b]', 'into', 'your', 'hand', '.']
[INFO] [base.subeffect.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.subeffect.Put] - Entered Put Token ['Put', 'a', '[b]', 'Draconic', 'Creation', '[/b]', 'into', 'your', 'hand', '.']
[INFO] [base.subeffect.subeffect.Put.parseCards] - Entered with tokens: ['a', '[b]', 'Draconic', 'Creation', '[/b]', 'into', 'your', 'hand', '.']
[INFO] [base.subeffect.subeffect] - Found {'type': 'Put', 'effects': [{'quantifer': 'a', 'card_name': 'Draconic Creation', 'type': 'NamedCard'}], 'destination': 'hand'}
[INFO] [base.subeffect.subeffect] - Exiting with tokens: []
[INFO] [base.subeffect] - Found {'type': 'Discard', 'effects': {'cardsToDiscard': 'a', 'effects': [{'type': 'Put', 'effects': [{'quantifer': 'a', 'card_name': 'Draconic Creation', 'type': 'NamedCard'}], 'destination': 'hand'}]}}
[INFO] [base.subeffect] - Exiting with tokens: []
[INFO] [base] - Finished iteration ['Fanfare', '[/b]', ':', 'Discard', 'a', 'card', 'from', 'your', 'hand', '.', 'Put', 'a', '[b]', 'Draconic', 'Creation', '[/b]', 'into', 'your', 'hand', '.']
[INFO] [base.evolveEffect] - Finished iteration ['Evolve', '[/b]', ':', 'Subtract', '2', 'from', 'the', 'cost', 'of', 'a', 'random', '[b]', 'Draconic', 'Creation', '[/b]', 'in', 'your', 'hand', '.']
[INFO] [base.evolveEffect] - [
    {
        "type": "Fanfare",
        "effects": [
            {
                "type": "Discard",
                "effects": {
                    "cardsToDiscard": "a",
                    "effects": [
                        {
                            "type": "Put",
                            "effects": [
                                {
                                    "quantifer": "a",
                                    "card_name": "Draconic Creation",
                                    "type": "NamedCard"
                                }
                            ],
                            "destination": "hand"
                        }
                    ]
                }
            }
        ]
    }
]
[INFO] [base.evolveEffect] - []
[INFO] [base] - Dragon Oracle
[INFO] [base] - Spell
[INFO] [base.subeffect] - Parsing subeffects with Tokens ['Gain', 'an', 'empty', 'play', 'point', 'orb', '.', '\n']
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.Gain] - Entered gain ['Gain', 'an', 'empty', 'play', 'point', 'orb', '.', '\n']
[INFO] [base.subeffect.Gain.parseGain] - Starting with Token an
[INFO] [base.subeffect.Gain.parseGain] - Starting with Token orb
[WARNING] [base.subeffect.Gain.parseGain] - Found Unknown ['orb', '.', '\n']
[INFO] [base.subeffect] - Found {'type': 'Gain', 'effects': [{'type': 'An empty play point'}]}
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Exiting with tokens: []
[INFO] [base] - Finished iteration []
[INFO] [base.subeffect] - Parsing subeffects with Tokens ['If', '[b]', 'Overflow', '[/b]', 'is', 'already', 'active', 'for', 'you', 'when', 'this', 'card', 'is', 'played', ',', 'draw', 'a', 'card', '.']
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.If] - Starting if with ['If', '[b]', 'Overflow', '[/b]', 'is', 'already', 'active', 'for', 'you', 'when', 'this', 'card', 'is', 'played', ',', 'draw', 'a', 'card', '.']
[INFO] [base.subeffect.If.condition] - Entered conditions with tokens ['[b]', 'Overflow', '[/b]', 'is', 'already', 'active', 'for', 'you', 'when', 'this', 'card', 'is', 'played', ',', 'draw', 'a', 'card', '.']
[INFO] [base.subeffect.If.condition] - Condition Tokens ['[b]', 'Overflow', '[/b]', 'is', 'already', 'active', 'for', 'you', 'when', 'this', 'card', 'is', 'played', ',']
[INFO] [base.subeffect.If.condition] - Tokens after Popping ['draw', 'a', 'card', '.']
[INFO] [base.subeffect.If] - Parsing if subeffect ['draw', 'a', 'card']
[INFO] [base.subeffect.If.subeffect] - Parsing subeffects with Tokens ['draw', 'a', 'card']
[INFO] [base.subeffect.If.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.If.subeffect.Draw] - Entering draw with ['draw', 'a', 'card']
[INFO] [base.subeffect.If.subeffect] - Found {'type': 'draw', 'amount': 'a'}
[INFO] [base.subeffect.If.subeffect] - Exiting with tokens: []
[INFO] [base.subeffect] - Found {'type': 'If', 'effects': {'conditions': [{'type': 'CheckActiveState', 'state': 'Overflow', 'stateEqualTo': True}], 'then': [{'type': 'draw', 'amount': 'a'}]}}
[INFO] [base.subeffect] - Exiting with tokens: []
[INFO] [base] - Finished iteration []
[INFO] [base.evolveEffect] - [
    [
        {
            "type": "Gain",
            "effects": [
                {
                    "type": "An empty play point"
                }
            ]
        }
    ],
    [
        {
            "type": "If",
            "effects": {
                "conditions": [
                    {
                        "type": "CheckActiveState",
                        "state": "Overflow",
                        "stateEqualTo": true
                    }
                ],
                "then": [
                    {
                        "type": "draw",
                        "amount": "a"
                    }
                ]
            }
        }
    ]
]
[INFO] [base.evolveEffect] - []
[INFO] [base] - Dragonewt's Might
[INFO] [base] - Spell
[INFO] [base.subeffect] - Parsing subeffects with Tokens ['If', 'this', 'card', 'is', 'discarded', 'from', 'your', 'hand', ',', 'draw', 'a', 'card', '.', 'Then', ',', 'if', '[b]', 'Overflow', '[/b]', 'is', 'active', 'for', 'you', ',', 'deal', '3', 'damage', 'to', 'a', 'random', 'enemy', 'follower', '.', '\n']
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.If] - Starting if with ['If', 'this', 'card', 'is', 'discarded', 'from', 'your', 'hand', ',', 'draw', 'a', 'card', '.', 'Then', ',', 'if', '[b]', 'Overflow', '[/b]', 'is', 'active', 'for', 'you', ',', 'deal', '3', 'damage', 'to', 'a', 'random', 'enemy', 'follower', '.', '\n']
[INFO] [base.subeffect.If.condition] - Entered conditions with tokens ['this', 'card', 'is', 'discarded', 'from', 'your', 'hand', ',', 'draw', 'a', 'card', '.', 'Then', ',', 'if', '[b]', 'Overflow', '[/b]', 'is', 'active', 'for', 'you', ',', 'deal', '3', 'damage', 'to', 'a', 'random', 'enemy', 'follower', '.', '\n']
[INFO] [base.subeffect.If.condition] - Condition Tokens ['this', 'card', 'is', 'discarded', 'from', 'your', 'hand', ',']
[INFO] [base.subeffect.If.condition] - Tokens after Popping ['draw', 'a', 'card', '.', 'Then', ',', 'if', '[b]', 'Overflow', '[/b]', 'is', 'active', 'for', 'you', ',', 'deal', '3', 'damage', 'to', 'a', 'random', 'enemy', 'follower', '.', '\n']
[INFO] [base.subeffect.If] - Parsing if subeffect ['draw', 'a', 'card']
[INFO] [base.subeffect.If.subeffect] - Parsing subeffects with Tokens ['draw', 'a', 'card']
[INFO] [base.subeffect.If.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.If.subeffect.Draw] - Entering draw with ['draw', 'a', 'card']
[INFO] [base.subeffect.If.subeffect] - Found {'type': 'draw', 'amount': 'a'}
[INFO] [base.subeffect.If.subeffect] - Exiting with tokens: []
[INFO] [base.subeffect] - Found {'type': 'If', 'effects': {'conditions': [], 'then': [{'type': 'draw', 'amount': 'a'}]}}
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.then] - Starting Then with ['Then', ',', 'if', '[b]', 'Overflow', '[/b]', 'is', 'active', 'for', 'you', ',', 'deal', '3', 'damage', 'to', 'a', 'random', 'enemy', 'follower', '.', '\n']
[INFO] [base.subeffect.then.subeffect] - Parsing subeffects with Tokens ['if', '[b]', 'Overflow', '[/b]', 'is', 'active', 'for', 'you', ',', 'deal', '3', 'damage', 'to', 'a', 'random', 'enemy', 'follower', '.', '\n']
[INFO] [base.subeffect.then.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.then.subeffect.If] - Starting if with ['if', '[b]', 'Overflow', '[/b]', 'is', 'active', 'for', 'you', ',', 'deal', '3', 'damage', 'to', 'a', 'random', 'enemy', 'follower', '.', '\n']
[INFO] [base.subeffect.then.subeffect.If.condition] - Entered conditions with tokens ['[b]', 'Overflow', '[/b]', 'is', 'active', 'for', 'you', ',', 'deal', '3', 'damage', 'to', 'a', 'random', 'enemy', 'follower', '.', '\n']
[INFO] [base.subeffect.then.subeffect.If.condition] - Condition Tokens ['[b]', 'Overflow', '[/b]', 'is', 'active', 'for', 'you', ',']
[INFO] [base.subeffect.then.subeffect.If.condition] - Tokens after Popping ['deal', '3', 'damage', 'to', 'a', 'random', 'enemy', 'follower', '.', '\n']
[INFO] [base.subeffect.then.subeffect.If] - Parsing if subeffect ['deal', '3', 'damage', 'to', 'a', 'random', 'enemy', 'follower']
[INFO] [base.subeffect.then.subeffect.If.subeffect] - Parsing subeffects with Tokens ['deal', '3', 'damage', 'to', 'a', 'random', 'enemy', 'follower']
[INFO] [base.subeffect.then.subeffect.If.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.then.subeffect.If.subeffect.Deal.changeHealth] - Damage tokens after target checks: ['enemy', 'follower']
[WARNING] [base.subeffect.then.subeffect.If.subeffect.Deal.changeHealth] - Encountered unexpected
[WARNING] [base.subeffect.then.subeffect.If.subeffect.Deal.changeHealth] - {'amount': '3', 'targets': 'random', 'times': 1, 'and': {}, 'quantifer': 'a', 'user': 'random'}
[WARNING] [base.subeffect.then.subeffect.If.subeffect.Deal.changeHealth] - ['enemy', 'follower']
[INFO] [base.subeffect.then.subeffect.If.subeffect.Deal.changeHealth] - Leaving changeHealth with Tokens ['enemy', 'follower']
[INFO] [base.subeffect.then.subeffect.If.subeffect] - Found {'type': 'Deal', 'effects': {'amount': '3', 'targets': 'random', 'times': 1, 'and': {}, 'quantifer': 'a', 'user': 'random'}}
[INFO] [base.subeffect.then.subeffect.If.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.then.subeffect.If.subeffect] - Exiting with tokens: []
[INFO] [base.subeffect.then.subeffect] - Found {'type': 'If', 'effects': {'conditions': [{'type': 'CheckActiveState', 'state': 'Overflow', 'stateEqualTo': True}], 'then': [{'type': 'Deal', 'effects': {'amount': '3', 'targets': 'random', 'times': 1, 'and': {}, 'quantifer': 'a', 'user': 'random'}}]}}
[INFO] [base.subeffect.then.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.then.subeffect] - Exiting with tokens: []
[INFO] [base.subeffect] - Found {'type': 'Then', 'effects': [{'type': 'If', 'effects': {'conditions': [{'type': 'CheckActiveState', 'state': 'Overflow', 'stateEqualTo': True}], 'then': [{'type': 'Deal', 'effects': {'amount': '3', 'targets': 'random', 'times': 1, 'and': {}, 'quantifer': 'a', 'user': 'random'}}]}}]}
[INFO] [base.subeffect] - Exiting with tokens: []
[INFO] [base] - Finished iteration []
[INFO] [base.subeffect] - Parsing subeffects with Tokens ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '\n']
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Exiting with tokens: []
[INFO] [base] - Finished iteration []
[INFO] [base.subeffect] - Parsing subeffects with Tokens ['Discard', 'a', 'card', 'from', 'your', 'hand', '.', '\n']
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Entered discard tokens ['Discard', 'a', 'card', 'from', 'your', 'hand', '.', '\n']
[INFO] [base.subeffect.subeffect] - Parsing subeffects with Tokens ['\n']
[INFO] [base.subeffect.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.subeffect] - Exiting with tokens: []
[INFO] [base.subeffect] - Found {'type': 'Discard', 'effects': {'cardsToDiscard': 'a', 'effects': []}}
[INFO] [base.subeffect] - Exiting with tokens: []
[INFO] [base] - Finished iteration []
[INFO] [base.subeffect] - Parsing subeffects with Tokens ['Draw', 'a', 'card', '.', '\n']
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.Draw] - Entering draw with ['Draw', 'a', 'card', '.', '\n']
[INFO] [base.subeffect] - Found {'type': 'Draw', 'amount': 'a'}
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Exiting with tokens: []
[INFO] [base] - Finished iteration []
[INFO] [base.subeffect] - Parsing subeffects with Tokens ['Deal', '3', 'damage', 'to', 'a', 'random', 'enemy', 'follower', '.']
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.Deal.changeHealth] - Damage tokens after target checks: ['enemy', 'follower', '.']
[WARNING] [base.subeffect.Deal.changeHealth] - Encountered unexpected
[WARNING] [base.subeffect.Deal.changeHealth] - {'amount': '3', 'targets': 'random', 'times': 1, 'and': {}, 'quantifer': 'a', 'user': 'random'}
[WARNING] [base.subeffect.Deal.changeHealth] - ['enemy', 'follower', '.']
[INFO] [base.subeffect.Deal.changeHealth] - Leaving changeHealth with Tokens ['enemy', 'follower', '.']
[INFO] [base.subeffect] - Found {'type': 'Deal', 'effects': {'amount': '3', 'targets': 'random', 'times': 1, 'and': {}, 'quantifer': 'a', 'user': 'random'}}
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Exiting with tokens: []
[INFO] [base] - Finished iteration []
[INFO] [base.evolveEffect] - [
    [
        {
            "type": "If",
            "effects": {
                "conditions": [],
                "then": [
                    {
                        "type": "draw",
                        "amount": "a"
                    }
                ]
            }
        },
        {
            "type": "Then",
            "effects": [
                {
                    "type": "If",
                    "effects": {
                        "conditions": [
                            {
                                "type": "CheckActiveState",
                                "state": "Overflow",
                                "stateEqualTo": true
                            }
                        ],
                        "then": [
                            {
                                "type": "Deal",
                                "effects": {
                                    "amount": "3",
                                    "targets": "random",
                                    "times": 1,
                                    "and": {},
                                    "quantifer": "a",
                                    "user": "random"
                                }
                            }
                        ]
                    }
                }
            ]
        }
    ],
    [],
    [
        {
            "type": "Discard",
            "effects": {
                "cardsToDiscard": "a",
                "effects": []
            }
        }
    ],
    [
        {
            "type": "Draw",
            "amount": "a"
        }
    ],
    [
        {
            "type": "Deal",
            "effects": {
                "amount": "3",
                "targets": "random",
                "times": 1,
                "and": {},
                "quantifer": "a",
                "user": "random"
            }
        }
    ]
]
[INFO] [base.evolveEffect] - []
[INFO] [base] - Angel's Blessing
[INFO] [base] - Spell
[INFO] [base.subeffect] - Parsing subeffects with Tokens ['Draw', '2', 'cards', '.', '\n']
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.Draw] - Entering draw with ['Draw', '2', 'cards', '.', '\n']
[INFO] [base.subeffect] - Found {'type': 'Draw', 'amount': '2'}
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Exiting with tokens: []
[INFO] [base] - Finished iteration []
[INFO] [base.subeffect] - Parsing subeffects with Tokens ['If', 'you', 'have', 'more', 'evolution', 'points', 'than', 'your', 'opponent', ',', 'restore', '2', 'defense', 'to', 'your', 'leader', 'and', 'recover', '2', 'play', 'points', '.', '(', 'You', 'have', '0', 'evolution', 'points', 'on', 'turns', 'you', 'are', 'unable', 'to', 'evolve', '.', ')']
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.If] - Starting if with ['If', 'you', 'have', 'more', 'evolution', 'points', 'than', 'your', 'opponent', ',', 'restore', '2', 'defense', 'to', 'your', 'leader', 'and', 'recover', '2', 'play', 'points', '.', '(', 'You', 'have', '0', 'evolution', 'points', 'on', 'turns', 'you', 'are', 'unable', 'to', 'evolve', '.', ')']
[INFO] [base.subeffect.If.condition] - Entered conditions with tokens ['you', 'have', 'more', 'evolution', 'points', 'than', 'your', 'opponent', ',', 'restore', '2', 'defense', 'to', 'your', 'leader', 'and', 'recover', '2', 'play', 'points', '.', '(', 'You', 'have', '0', 'evolution', 'points', 'on', 'turns', 'you', 'are', 'unable', 'to', 'evolve', '.', ')']
[INFO] [base.subeffect.If.condition] - Condition Tokens ['you', 'have', 'more', 'evolution', 'points', 'than', 'your', 'opponent', ',']
[INFO] [base.subeffect.If.condition] - Tokens after Popping ['restore', '2', 'defense', 'to', 'your', 'leader', 'and', 'recover', '2', 'play', 'points', '.', '(', 'You', 'have', '0', 'evolution', 'points', 'on', 'turns', 'you', 'are', 'unable', 'to', 'evolve', '.', ')']
[INFO] [base.subeffect.If] - Parsing if subeffect ['restore', '2', 'defense', 'to', 'your', 'leader', 'and', 'recover', '2', 'play', 'points']
[INFO] [base.subeffect.If.subeffect] - Parsing subeffects with Tokens ['restore', '2', 'defense', 'to', 'your', 'leader', 'and', 'recover', '2', 'play', 'points']
[INFO] [base.subeffect.If.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.If.subeffect.Restore.changeHealth] - Damage tokens after target checks: ['and', 'recover', '2', 'play', 'points']
[WARNING] [base.subeffect.If.subeffect.Restore.changeHealth] - Encountered unexpected
[WARNING] [base.subeffect.If.subeffect.Restore.changeHealth] - {'amount': '2', 'targets': 'leader', 'times': 1, 'and': {}, 'quantifer': 'your', 'user': 'leader'}
[WARNING] [base.subeffect.If.subeffect.Restore.changeHealth] - ['and', 'recover', '2', 'play', 'points']
[INFO] [base.subeffect.If.subeffect.Restore.changeHealth] - Leaving changeHealth with Tokens ['and', 'recover', '2', 'play', 'points']
[INFO] [base.subeffect.If.subeffect] - Found {'type': 'Restore', 'effects': {'amount': '2', 'targets': 'leader', 'times': 1, 'and': {}, 'quantifer': 'your', 'user': 'leader'}}
[INFO] [base.subeffect.If.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.If.subeffect] - Found {'type': 'Recover', 'effect': {'amount': '2', 'resource': 'play'}}
[INFO] [base.subeffect.If.subeffect] - Exiting with tokens: []
[INFO] [base.subeffect] - Found {'type': 'If', 'effects': {'conditions': [{'type': 'CheckEvolutionHigherThanOpponent'}], 'then': [{'type': 'Restore', 'effects': {'amount': '2', 'targets': 'leader', 'times': 1, 'and': {}, 'quantifer': 'your', 'user': 'leader'}}, {'type': 'Recover', 'effect': {'amount': '2', 'resource': 'play'}}]}}
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Found {'type': 'Parens', 'condition': None}
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.Evolve] - Entering evolve with ['evolve', '.', ')']
[INFO] [base.subeffect] - Found {'type': 'Evolve', 'effects': ['.', ')']}
[INFO] [base.subeffect] - Exiting with tokens: []
[INFO] [base] - Finished iteration []
[INFO] [base.evolveEffect] - [
    [
        {
            "type": "Draw",
            "amount": "2"
        }
    ],
    [
        {
            "type": "If",
            "effects": {
                "conditions": [
                    {
                        "type": "CheckEvolutionHigherThanOpponent"
                    }
                ],
                "then": [
                    {
                        "type": "Restore",
                        "effects": {
                            "amount": "2",
                            "targets": "leader",
                            "times": 1,
                            "and": {},
                            "quantifer": "your",
                            "user": "leader"
                        }
                    },
                    {
                        "type": "Recover",
                        "effect": {
                            "amount": "2",
                            "resource": "play"
                        }
                    }
                ]
            },
            "limit": {
                "type": "Parens",
                "condition": null
            }
        },
        {
            "type": "Evolve",
            "effects": [
                ".",
                ")"
            ]
        }
    ]
]
[INFO] [base.evolveEffect] - []
[INFO] [base] - Si Long, Draconic God-Queen
[INFO] [base] - Follower
[INFO] [base.subeffect] - Parsing subeffects with Tokens [':', 'Restore', '3', 'defense', 'to', 'your', 'leader', '.', 'Put', 'a', '[b]', 'Tidal', 'Tyranny', '[/b]', 'into', 'your', 'hand', '.']
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.Restore.changeHealth] - Damage tokens after target checks: ['.', 'Put', 'a', '[b]', 'Tidal', 'Tyranny', '[/b]', 'into', 'your', 'hand', '.']
[WARNING] [base.subeffect.Restore.changeHealth] - Encountered unexpected
[WARNING] [base.subeffect.Restore.changeHealth] - {'amount': '3', 'targets': 'leader', 'times': 1, 'and': {}, 'quantifer': 'your', 'user': 'leader'}
[WARNING] [base.subeffect.Restore.changeHealth] - ['.', 'Put', 'a', '[b]', 'Tidal', 'Tyranny', '[/b]', 'into', 'your', 'hand', '.']
[INFO] [base.subeffect.Restore.changeHealth] - Leaving changeHealth with Tokens ['.', 'Put', 'a', '[b]', 'Tidal', 'Tyranny', '[/b]', 'into', 'your', 'hand', '.']
[INFO] [base.subeffect] - Found {'type': 'Restore', 'effects': {'amount': '3', 'targets': 'leader', 'times': 1, 'and': {}, 'quantifer': 'your', 'user': 'leader'}}
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.Put] - Entered Put Token ['Put', 'a', '[b]', 'Tidal', 'Tyranny', '[/b]', 'into', 'your', 'hand', '.']
[INFO] [base.subeffect.Put.parseCards] - Entered with tokens: ['a', '[b]', 'Tidal', 'Tyranny', '[/b]', 'into', 'your', 'hand', '.']
[INFO] [base.subeffect] - Found {'type': 'Put', 'effects': [{'quantifer': 'a', 'card_name': 'Tidal Tyranny', 'type': 'NamedCard'}], 'destination': 'hand'}
[INFO] [base.subeffect] - Exiting with tokens: []
[INFO] [base] - Finished iteration ['Fanfare', '[/b]', ':', 'Restore', '3', 'defense', 'to', 'your', 'leader', '.', 'Put', 'a', '[b]', 'Tidal', 'Tyranny', '[/b]', 'into', 'your', 'hand', '.']
[INFO] [base.evolveEffect] - Finished iteration ['Evolve', '[/b]', ':', 'Gain', 'an', 'empty', 'play', 'point', 'orb', '.']
[INFO] [base.evolveEffect] - [
    {
        "type": "Fanfare",
        "effects": [
            {
                "type": "Restore",
                "effects": {
                    "amount": "3",
                    "targets": "leader",
                    "times": 1,
                    "and": {},
                    "quantifer": "your",
                    "user": "leader"
                }
            },
            {
                "type": "Put",
                "effects": [
                    {
                        "quantifer": "a",
                        "card_name": "Tidal Tyranny",
                        "type": "NamedCard"
                    }
                ],
                "destination": "hand"
            }
        ]
    }
]
[INFO] [base.evolveEffect] - []
[INFO] [base] - Waterwyrm's Blessing
[INFO] [base] - Spell
[INFO] [base.subeffect] - Parsing subeffects with Tokens ['Gain', 'an', 'empty', 'play', 'point', 'orb', '.', '\n']
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.Gain] - Entered gain ['Gain', 'an', 'empty', 'play', 'point', 'orb', '.', '\n']
[INFO] [base.subeffect.Gain.parseGain] - Starting with Token an
[INFO] [base.subeffect.Gain.parseGain] - Starting with Token orb
[WARNING] [base.subeffect.Gain.parseGain] - Found Unknown ['orb', '.', '\n']
[INFO] [base.subeffect] - Found {'type': 'Gain', 'effects': [{'type': 'An empty play point'}]}
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Exiting with tokens: []
[INFO] [base] - Finished iteration []
[INFO] [base.subeffect] - Parsing subeffects with Tokens ['If', '[b]', 'Overflow', '[/b]', 'is', 'already', 'active', 'for', 'you', 'when', 'this', 'card', 'is', 'played', ',', 'restore', '2', 'defense', 'to', 'your', 'leader', 'and', 'draw', '2', 'cards', '.']
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.If] - Starting if with ['If', '[b]', 'Overflow', '[/b]', 'is', 'already', 'active', 'for', 'you', 'when', 'this', 'card', 'is', 'played', ',', 'restore', '2', 'defense', 'to', 'your', 'leader', 'and', 'draw', '2', 'cards', '.']
[INFO] [base.subeffect.If.condition] - Entered conditions with tokens ['[b]', 'Overflow', '[/b]', 'is', 'already', 'active', 'for', 'you', 'when', 'this', 'card', 'is', 'played', ',', 'restore', '2', 'defense', 'to', 'your', 'leader', 'and', 'draw', '2', 'cards', '.']
[INFO] [base.subeffect.If.condition] - Condition Tokens ['[b]', 'Overflow', '[/b]', 'is', 'already', 'active', 'for', 'you', 'when', 'this', 'card', 'is', 'played', ',']
[INFO] [base.subeffect.If.condition] - Tokens after Popping ['restore', '2', 'defense', 'to', 'your', 'leader', 'and', 'draw', '2', 'cards', '.']
[INFO] [base.subeffect.If] - Parsing if subeffect ['restore', '2', 'defense', 'to', 'your', 'leader', 'and', 'draw', '2', 'cards']
[INFO] [base.subeffect.If.subeffect] - Parsing subeffects with Tokens ['restore', '2', 'defense', 'to', 'your', 'leader', 'and', 'draw', '2', 'cards']
[INFO] [base.subeffect.If.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.If.subeffect.Restore.changeHealth] - Damage tokens after target checks: ['and', 'draw', '2', 'cards']
[WARNING] [base.subeffect.If.subeffect.Restore.changeHealth] - Encountered unexpected
[WARNING] [base.subeffect.If.subeffect.Restore.changeHealth] - {'amount': '2', 'targets': 'leader', 'times': 1, 'and': {}, 'quantifer': 'your', 'user': 'leader'}
[WARNING] [base.subeffect.If.subeffect.Restore.changeHealth] - ['and', 'draw', '2', 'cards']
[INFO] [base.subeffect.If.subeffect.Restore.changeHealth] - Leaving changeHealth with Tokens ['and', 'draw', '2', 'cards']
[INFO] [base.subeffect.If.subeffect] - Found {'type': 'Restore', 'effects': {'amount': '2', 'targets': 'leader', 'times': 1, 'and': {}, 'quantifer': 'your', 'user': 'leader'}}
[INFO] [base.subeffect.If.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.If.subeffect.Draw] - Entering draw with ['draw', '2', 'cards']
[INFO] [base.subeffect.If.subeffect] - Found {'type': 'draw', 'amount': '2'}
[INFO] [base.subeffect.If.subeffect] - Exiting with tokens: []
[INFO] [base.subeffect] - Found {'type': 'If', 'effects': {'conditions': [{'type': 'CheckActiveState', 'state': 'Overflow', 'stateEqualTo': True}], 'then': [{'type': 'Restore', 'effects': {'amount': '2', 'targets': 'leader', 'times': 1, 'and': {}, 'quantifer': 'your', 'user': 'leader'}}, {'type': 'draw', 'amount': '2'}]}}
[INFO] [base.subeffect] - Exiting with tokens: []
[INFO] [base] - Finished iteration []
[INFO] [base.evolveEffect] - [
    [
        {
            "type": "Gain",
            "effects": [
                {
                    "type": "An empty play point"
                }
            ]
        }
    ],
    [
        {
            "type": "If",
            "effects": {
                "conditions": [
                    {
                        "type": "CheckActiveState",
                        "state": "Overflow",
                        "stateEqualTo": true
                    }
                ],
                "then": [
                    {
                        "type": "Restore",
                        "effects": {
                            "amount": "2",
                            "targets": "leader",
                            "times": 1,
                            "and": {},
                            "quantifer": "your",
                            "user": "leader"
                        }
                    },
                    {
                        "type": "draw",
                        "amount": "2"
                    }
                ]
            }
        }
    ]
]
[INFO] [base.evolveEffect] - []
[INFO] [base] - Noir & Blanc, Brothers
[INFO] [base] - Follower
[INFO] [base] - Finished iteration ['If', 'this', 'card', 'is', 'discarded', 'from', 'your', 'hand', ',', 'summon', 'a', '1', '/', '1', '[b]', 'Noir', '&', 'Blanc', ',', 'Brothers', '[/b]', '.', '\n']
[INFO] [base] - Finished iteration ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '\n']
[INFO] [base] - Finished iteration ['Storm', '[/b]', '.', '\n']
[INFO] [base] - Finished iteration ["Can't", 'be', 'evolved', 'using', 'evolution', 'points', '.', '(', 'Can', 'be', 'evolved', 'using', 'card', 'effects', '.', ')', '\n']
[INFO] [base.subeffect] - Parsing subeffects with Tokens ['if', 'you', 'have', '10', 'play', 'point', 'orbs', ',', 'evolve', 'this', 'follower', '.']
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.If] - Starting if with ['if', 'you', 'have', '10', 'play', 'point', 'orbs', ',', 'evolve', 'this', 'follower', '.']
[INFO] [base.subeffect.If.condition] - Entered conditions with tokens ['you', 'have', '10', 'play', 'point', 'orbs', ',', 'evolve', 'this', 'follower', '.']
[INFO] [base.subeffect.If.condition] - Condition Tokens ['you', 'have', '10', 'play', 'point', 'orbs', ',']
[INFO] [base.subeffect.If.condition] - Tokens after Popping ['evolve', 'this', 'follower', '.']
[INFO] [base.subeffect.If] - Parsing if subeffect ['evolve', 'this', 'follower']
[INFO] [base.subeffect.If.subeffect] - Parsing subeffects with Tokens ['evolve', 'this', 'follower']
[INFO] [base.subeffect.If.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.If.subeffect.Evolve] - Entering evolve with ['evolve', 'this', 'follower']
[INFO] [base.subeffect.If.subeffect] - Found {'type': 'Evolve', 'effects': ['this', 'follower']}
[INFO] [base.subeffect.If.subeffect] - Exiting with tokens: []
[INFO] [base.subeffect] - Found {'type': 'If', 'effects': {'conditions': [], 'then': [{'type': 'Evolve', 'effects': ['this', 'follower']}]}}
[INFO] [base.subeffect] - Exiting with tokens: []
[INFO] [base] - Finished iteration []
[INFO] [base.evolveEffect] - Finished iteration ['Ward', '[/b]', '.', '\n']
[INFO] [base.evolveEffect] - Finished iteration ['Reduce', 'damage', 'from', 'effects', 'to', '0', '.', '\n']
[INFO] [base.evolveEffect] - Finished iteration ["Can't", 'be', 'destroyed', 'by', 'effects', '.']
[INFO] [base.evolveEffect] - [
    {
        "type": "Storm"
    },
    {
        "type": "At the end",
        "user": "your",
        "when": "current",
        "effects": [
            {
                "type": "If",
                "effects": {
                    "conditions": [],
                    "then": [
                        {
                            "type": "Evolve",
                            "effects": [
                                "this",
                                "follower"
                            ]
                        }
                    ]
                }
            }
        ]
    }
]
[INFO] [base.evolveEffect] - [
    {
        "type": "Ward"
    }
]
[INFO] [base] - Drazael, Ravening Enforcer
[INFO] [base] - Follower
[INFO] [base.alternativeCosts] - Found alternativeCost Accelerate for with ['Accelerate', '[/b]', '[b]', '(', '1', ')', '[/b]', ':', 'Draw', 'a', 'card', '.', '\n']
[INFO] [base.alternativeCosts] - Entering subeffect for Accelerate
[INFO] [base.alternativeCosts.subeffect] - Parsing subeffects with Tokens ['[/b]', ':', 'Draw', 'a', 'card', '.', '\n']
[INFO] [base.alternativeCosts.subeffect] - Starting new loop of effect parsing
[INFO] [base.alternativeCosts.subeffect] - Starting new loop of effect parsing
[INFO] [base.alternativeCosts.subeffect] - Starting new loop of effect parsing
[INFO] [base.alternativeCosts.subeffect.Draw] - Entering draw with ['Draw', 'a', 'card', '.', '\n']
[INFO] [base.alternativeCosts.subeffect] - Found {'type': 'Draw', 'amount': 'a'}
[INFO] [base.alternativeCosts.subeffect] - Starting new loop of effect parsing
[INFO] [base.alternativeCosts.subeffect] - Exiting with tokens: []
[INFO] [base] - Finished iteration ['Accelerate', '[/b]', '[b]', '(', '1', ')', '[/b]', ':', 'Draw', 'a', 'card', '.', '\n']
[INFO] [base] - Finished iteration ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '\n']
[INFO] [base] - Finished iteration ['Ward', '[/b]', '.', '\n']
[INFO] [base.subeffect] - Parsing subeffects with Tokens [':', 'Give', '-', '5', '/', '-', '5', 'to', 'all', 'enemy', 'followers', '.', 'Restore', '5', 'defense', 'to', 'your', 'leader', '.', '\n']
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.Give] - Entered give ['Give', '-', '5', '/', '-', '5', 'to', 'all', 'enemy', 'followers', '.', 'Restore', '5', 'defense', 'to', 'your', 'leader', '.', '\n']
[INFO] [base.subeffect.Give.parseGain] - Starting with Token -
[INFO] [base.subeffect.Give.parseGain.statChange] - Entering stat change ['-', '5', '/', '-', '5', 'to']
[INFO] [base.subeffect] - Found {'type': 'Give', 'effects': [[{'type': 'StatChange', 'operation': '-', 'amount': '5'}, {'type': 'StatChange', 'operation': '-', 'amount': '5'}]]}
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.Restore.changeHealth] - Damage tokens after target checks: ['.', '\n']
[WARNING] [base.subeffect.Restore.changeHealth] - Encountered unexpected
[WARNING] [base.subeffect.Restore.changeHealth] - {'amount': '5', 'targets': 'leader', 'times': 1, 'and': {}, 'quantifer': 'your', 'user': 'leader'}
[WARNING] [base.subeffect.Restore.changeHealth] - ['.', '\n']
[INFO] [base.subeffect.Restore.changeHealth] - Leaving changeHealth with Tokens ['.', '\n']
[INFO] [base.subeffect] - Found {'type': 'Restore', 'effects': {'amount': '5', 'targets': 'leader', 'times': 1, 'and': {}, 'quantifer': 'your', 'user': 'leader'}}
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect] - Exiting with tokens: []
[INFO] [base] - Finished iteration ['Fanfare', '[/b]', ':', 'Give', '-', '5', '/', '-', '5', 'to', 'all', 'enemy', 'followers', '.', 'Restore', '5', 'defense', 'to', 'your', 'leader', '.', '\n']
[INFO] [base] - Finished iteration ["Can't", 'be', 'destroyed', 'by', 'effects', '.', '(', 'Can', 'be', 'destroyed', 'by', 'damage', 'from', 'effects', '.', ')']
[INFO] [base.evolveEffect] - Finished iteration ['(', 'Same', 'as', 'the', 'unevolved', 'form', ',', 'excluding', '[b]', 'Fanfare', '[/b]', '.', ')']
[INFO] [base.evolveEffect] - [
    {
        "type": "Accelerate",
        "cost": "1",
        "effects": [
            {
                "type": "Draw",
                "amount": "a"
            }
        ]
    },
    {
        "type": "Ward"
    },
    {
        "type": "Fanfare",
        "effects": [
            {
                "type": "Give",
                "effects": [
                    [
                        {
                            "type": "StatChange",
                            "operation": "-",
                            "amount": "5"
                        },
                        {
                            "type": "StatChange",
                            "operation": "-",
                            "amount": "5"
                        }
                    ]
                ]
            },
            {
                "type": "Restore",
                "effects": {
                    "amount": "5",
                    "targets": "leader",
                    "times": 1,
                    "and": {},
                    "quantifer": "your",
                    "user": "leader"
                }
            }
        ]
    }
]
[INFO] [base.evolveEffect] - []
