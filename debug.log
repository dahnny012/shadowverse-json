[INFO] [base] - Judith, Cosmic Observer
[INFO] [base] - Follower
[INFO] [base] - Next effect Enhance
[INFO] [base] - Modified baseEffectString ['Enhance', '(', '3', ')', '-', 'Destroy', 'a', 'random', 'enemy', 'follower', '.', '\n', 'Enhance', '(', '4', ')', ':', 'Draw', 'a', 'card', '.', '\n']
[INFO] [base] - Modified baseEffectString ['Enhance', '(', '3', ')', '-', 'Destroy', 'a', 'random', 'enemy', 'follower', '.', '\n', 'Enhance', '(', '4', ')', ':', 'Draw', 'a', 'card', '.', '\n', 'Enhance', '(', '5', ')', ':', 'Restore', '2', 'defense', 'to', 'your', 'leader', '.', '\n']
[INFO] [base] - Modified baseEffectString ['Enhance', '(', '3', ')', '-', 'Destroy', 'a', 'random', 'enemy', 'follower', '.', '\n', 'Enhance', '(', '4', ')', ':', 'Draw', 'a', 'card', '.', '\n', 'Enhance', '(', '5', ')', ':', 'Restore', '2', 'defense', 'to', 'your', 'leader', '.', '\n', 'Enhance', '(', '6', ')', ':', 'Give', 'your', 'leader', 'the', 'following', 'effect', '-', 'The', 'next', 'time', 'your', 'leader', 'takes', 'damage', ',', 'reduce', 'that', 'damage', 'to', '0', '.', '\n']
[INFO] [base] - Modified baseEffectString ['Enhance', '(', '3', ')', '-', 'Destroy', 'a', 'random', 'enemy', 'follower', '.', '\n', 'Enhance', '(', '4', ')', ':', 'Draw', 'a', 'card', '.', '\n', 'Enhance', '(', '5', ')', ':', 'Restore', '2', 'defense', 'to', 'your', 'leader', '.', '\n', 'Enhance', '(', '6', ')', ':', 'Give', 'your', 'leader', 'the', 'following', 'effect', '-', 'The', 'next', 'time', 'your', 'leader', 'takes', 'damage', ',', 'reduce', 'that', 'damage', 'to', '0', '.', '\n', 'Enhance', '(', '7', ')', ':', 'Gain', 'Storm', 'and', 'evolve', 'this', 'follower', '.']
[INFO] [base.subeffect] - Parsing subeffects with Tokens ['Enhance', '(', '3', ')', '-', 'Destroy', 'a', 'random', 'enemy', 'follower', '.', '\n', 'Enhance', '(', '4', ')', ':', 'Draw', 'a', 'card', '.', '\n', 'Enhance', '(', '5', ')', ':', 'Restore', '2', 'defense', 'to', 'your', 'leader', '.', '\n', 'Enhance', '(', '6', ')', ':', 'Give', 'your', 'leader', 'the', 'following', 'effect', '-', 'The', 'next', 'time', 'your', 'leader', 'takes', 'damage', ',', 'reduce', 'that', 'damage', 'to', '0', '.', '\n', 'Enhance', '(', '7', ')', ':', 'Gain', 'Storm', 'and', 'evolve', 'this', 'follower', '.']
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.alternativeCosts] - Found alternativeCost Enhance for with ['Enhance', '(', '3', ')', '-', 'Destroy', 'a', 'random', 'enemy', 'follower', '.', '\n']
[INFO] [base.subeffect.alternativeCosts] - Entering subeffect for Enhance
[INFO] [base.subeffect.alternativeCosts.subeffect] - Parsing subeffects with Tokens ['-', 'Destroy', 'a', 'random', 'enemy', 'follower', '.', '\n']
[INFO] [base.subeffect.alternativeCosts.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.alternativeCosts.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.alternativeCosts.subeffect.removal] - Entering removal with ['Destroy', 'a', 'random', 'enemy', 'follower', '.', '\n']
[INFO] [base.subeffect.alternativeCosts.subeffect] - Found {'type': 'Destroy', 'effects': {'quantifier': 'a', 'user': 'random', 'targets': 'enemy'}}
[INFO] [base.subeffect.alternativeCosts.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.alternativeCosts.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.alternativeCosts.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.alternativeCosts.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.alternativeCosts.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.alternativeCosts.subeffect] - Exiting with tokens: []
[INFO] [base.subeffect] - Found {'type': 'Enhance', 'cost': '3', 'effects': [{'type': 'Destroy', 'effects': {'quantifier': 'a', 'user': 'random', 'targets': 'enemy'}}]}
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.alternativeCosts] - Found alternativeCost Enhance for with ['Enhance', '(', '4', ')', ':', 'Draw', 'a', 'card', '.', '\n']
[INFO] [base.subeffect.alternativeCosts] - Entering subeffect for Enhance
[INFO] [base.subeffect.alternativeCosts.subeffect] - Parsing subeffects with Tokens [':', 'Draw', 'a', 'card', '.', '\n']
[INFO] [base.subeffect.alternativeCosts.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.alternativeCosts.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.alternativeCosts.subeffect.Draw] - Entering draw with ['Draw', 'a', 'card', '.', '\n']
[INFO] [base.subeffect.alternativeCosts.subeffect] - Found {'type': 'Draw', 'effects': {'quantifier': 'a'}}
[INFO] [base.subeffect.alternativeCosts.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.alternativeCosts.subeffect] - Exiting with tokens: []
[INFO] [base.subeffect] - Found {'type': 'Enhance', 'cost': '4', 'effects': [{'type': 'Draw', 'effects': {'quantifier': 'a'}}]}
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.alternativeCosts] - Found alternativeCost Enhance for with ['Enhance', '(', '5', ')', ':', 'Restore', '2', 'defense', 'to', 'your', 'leader', '.', '\n']
[INFO] [base.subeffect.alternativeCosts] - Entering subeffect for Enhance
[INFO] [base.subeffect.alternativeCosts.subeffect] - Parsing subeffects with Tokens [':', 'Restore', '2', 'defense', 'to', 'your', 'leader', '.', '\n']
[INFO] [base.subeffect.alternativeCosts.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.alternativeCosts.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.alternativeCosts.subeffect.Restore.changeHealth] - Damage tokens after target checks: ['.', '\n']
[WARNING] [base.subeffect.alternativeCosts.subeffect.Restore.changeHealth] - Encountered unexpected
[WARNING] [base.subeffect.alternativeCosts.subeffect.Restore.changeHealth] - {'amount': '2', 'targets': 'leader', 'times': 1, 'and': {}, 'quantifer': 'your', 'user': 'leader'}
[WARNING] [base.subeffect.alternativeCosts.subeffect.Restore.changeHealth] - ['.', '\n']
[INFO] [base.subeffect.alternativeCosts.subeffect.Restore.changeHealth] - Leaving changeHealth with Tokens ['.', '\n']
[INFO] [base.subeffect.alternativeCosts.subeffect] - Found {'type': 'Restore', 'effects': {'amount': '2', 'targets': 'leader', 'times': 1, 'and': {}, 'quantifer': 'your', 'user': 'leader'}}
[INFO] [base.subeffect.alternativeCosts.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.alternativeCosts.subeffect] - Exiting with tokens: []
[INFO] [base.subeffect] - Found {'type': 'Enhance', 'cost': '5', 'effects': [{'type': 'Restore', 'effects': {'amount': '2', 'targets': 'leader', 'times': 1, 'and': {}, 'quantifer': 'your', 'user': 'leader'}}]}
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.alternativeCosts] - Found alternativeCost Enhance for with ['Enhance', '(', '6', ')', ':', 'Give', 'your', 'leader', 'the', 'following', 'effect', '-', 'The', 'next', 'time', 'your', 'leader', 'takes', 'damage', ',', 'reduce', 'that', 'damage', 'to', '0', '.', '\n']
[INFO] [base.subeffect.alternativeCosts] - Entering subeffect for Enhance
[INFO] [base.subeffect.alternativeCosts.subeffect] - Parsing subeffects with Tokens [':', 'Give', 'your', 'leader', 'the', 'following', 'effect', '-', 'The', 'next', 'time', 'your', 'leader', 'takes', 'damage', ',', 'reduce', 'that', 'damage', 'to', '0', '.', '\n']
[INFO] [base.subeffect.alternativeCosts.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.alternativeCosts.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.alternativeCosts.subeffect.Give] - Entered give ['Give', 'your', 'leader', 'the', 'following', 'effect', '-', 'The', 'next', 'time', 'your', 'leader', 'takes', 'damage', ',', 'reduce', 'that', 'damage', 'to', '0', '.', '\n']
[WARNING] [base.subeffect.alternativeCosts.subeffect.Give.parseGain] - Found Unknown ['your', 'leader', 'the', 'following', 'effect', '-', 'The', 'next', 'time', 'your', 'leader', 'takes', 'damage', ',', 'reduce', 'that', 'damage', 'to']
[INFO] [base.subeffect.alternativeCosts.subeffect] - Found {'type': 'Give', 'effects': [[]]}
[INFO] [base.subeffect.alternativeCosts.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.alternativeCosts.subeffect] - Exiting with tokens: []
[INFO] [base.subeffect] - Found {'type': 'Enhance', 'cost': '6', 'effects': [{'type': 'Give', 'effects': [[]]}]}
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.alternativeCosts] - Found alternativeCost Enhance for with ['Enhance', '(', '7', ')', ':', 'Gain', 'Storm', 'and', 'evolve', 'this', 'follower', '.']
[INFO] [base.subeffect.alternativeCosts] - Entering subeffect for Enhance
[INFO] [base.subeffect.alternativeCosts.subeffect] - Parsing subeffects with Tokens [':', 'Gain', 'Storm', 'and', 'evolve', 'this', 'follower', '.']
[INFO] [base.subeffect.alternativeCosts.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.alternativeCosts.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.alternativeCosts.subeffect.Gain] - Entered gain ['Gain', 'Storm', 'and', 'evolve', 'this', 'follower', '.']
[WARNING] [base.subeffect.alternativeCosts.subeffect.Gain.parseGain] - Found Unknown ['and', 'evolve', 'this', 'follower', '.']
[INFO] [base.subeffect.alternativeCosts.subeffect] - Found {'type': 'Gain', 'effects': [{'type': 'Storm'}]}
[INFO] [base.subeffect.alternativeCosts.subeffect] - Exiting with tokens: []
[INFO] [base.subeffect] - Found {'type': 'Enhance', 'cost': '7', 'effects': [{'type': 'Gain', 'effects': [{'type': 'Storm'}]}]}
[INFO] [base.subeffect] - Exiting with tokens: []
[INFO] [base] - Finished iteration ['Fanfare', ':', 'Enhance', '(', '3', ')', '-', 'Destroy', 'a', 'random', 'enemy', 'follower', '.', '\n']
[INFO] [base] - [
    {
        "type": "Fanfare",
        "effects": [
            {
                "type": "Enhance",
                "cost": "3",
                "effects": [
                    {
                        "type": "Destroy",
                        "effects": {
                            "quantifier": "a",
                            "user": "random",
                            "targets": "enemy"
                        }
                    }
                ]
            },
            {
                "type": "Enhance",
                "cost": "4",
                "effects": [
                    {
                        "type": "Draw",
                        "effects": {
                            "quantifier": "a"
                        }
                    }
                ]
            },
            {
                "type": "Enhance",
                "cost": "5",
                "effects": [
                    {
                        "type": "Restore",
                        "effects": {
                            "amount": "2",
                            "targets": "leader",
                            "times": 1,
                            "and": {},
                            "quantifer": "your",
                            "user": "leader"
                        }
                    }
                ]
            },
            {
                "type": "Enhance",
                "cost": "6",
                "effects": [
                    {
                        "type": "Give",
                        "effects": [
                            []
                        ]
                    }
                ]
            },
            {
                "type": "Enhance",
                "cost": "7",
                "effects": [
                    {
                        "type": "Gain",
                        "effects": [
                            {
                                "type": "Storm"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]
[INFO] [base] - Orchis, the Limitless
[INFO] [base] - Follower
[INFO] [base.Fusion] - Entering fusion with ['Fusion', ':', 'Puppets', '\n']
[INFO] [base] - Finished iteration ['Fusion', ':', 'Puppets', '\n']
[INFO] [base.condition] - Entered conditions with tokens ['cards', 'are', 'fused', 'to', 'this', 'card', ',', 'summon', 'a', 'Puppet', 'and', 'give', 'it', '+', '1', '/', '+', '0', '.', '\n']
[INFO] [base.condition] - After Popping ['summon', 'a', 'Puppet', 'and', 'give', 'it', '+', '1', '/', '+', '0', '.', '\n']
[INFO] [base] - Parsing if subeffect ['summon', 'a', 'Puppet', 'and', 'give', 'it', '+', '1', '/', '+', '0']
[INFO] [base.subeffect] - Parsing subeffects with Tokens ['summon', 'a', 'Puppet', 'and', 'give', 'it', '+', '1', '/', '+', '0']
[INFO] [base.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.Summon] - Entered with tokens ['summon', 'a', 'Puppet', 'and', 'give', 'it', '+', '1', '/', '+', '0']
[INFO] [base.subeffect.Summon.parseCards] - Entered with tokens: ['a', 'Puppet', 'and', 'give', 'it', '+', '1', '/', '+', '0']
[INFO] [base.subeffect.Summon.parseCards] - Unit stack ['Puppet']
[INFO] [base.subeffect.Summon.parseCards] - Card has a trigger ['give', 'it', '+', '1', '/', '+', '0']
[INFO] [base.subeffect.Summon.parseCards.subeffect] - Parsing subeffects with Tokens ['give', 'it', '+', '1', '/', '+', '0']
[INFO] [base.subeffect.Summon.parseCards.subeffect] - Starting new loop of effect parsing
[INFO] [base.subeffect.Summon.parseCards.subeffect.Give] - Entered give ['give', 'it', '+', '1', '/', '+', '0']
[INFO] [base.subeffect.Summon.parseCards.subeffect.Give.parseGain.statChange] - Entering stat change ['+', '1', '/', '+', '0']
[INFO] [base.subeffect.Summon.parseCards.subeffect] - Found {'type': 'Give', 'effects': [[{'type': 'StatChange', 'operation': '+', 'amount': '1'}, {'type': 'StatChange', 'operation': '+', 'amount': '0'}]], 'target': 'parent'}
[INFO] [base.subeffect.Summon.parseCards.subeffect] - Exiting with tokens: []
[INFO] [base.subeffect] - Found {'type': 'Summon', 'effects': [{'quantifer': 'a', 'type': 'NamedCard', 'cardname': 'Puppet', 'effects': [{'type': 'Give', 'effects': [[{'type': 'StatChange', 'operation': '+', 'amount': '1'}, {'type': 'StatChange', 'operation': '+', 'amount': '0'}]], 'target': 'parent'}]}]}
[INFO] [base.subeffect] - Exiting with tokens: []
[INFO] [base] - Finished iteration ['Whenever', 'cards', 'are', 'fused', 'to', 'this', 'card', ',', 'summon', 'a', 'Puppet', 'and', 'give', 'it', '+', '1', '/', '+', '0', '.', '\n']
[INFO] [base] - Finished iteration ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '\n']
